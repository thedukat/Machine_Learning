J = (1 / (2 * m)) * error_sqr
}
J_hist = vector()
for( i in 1:iterations){
theta_change = (alpha / m) %*% t(t((X %*% theta - y)) %*% X )
theta = theta - theta_change
J_hist = append(J_hist, J(X, y, theta))
}
plot(J_hist, type = "l")
h_theta = function(input) {
v = c(1, input)
calc = v %*% theta
calc
}
print(c("Thetas:", theta))
print(c("Result:", h_theta(input)))
t((X %*% theta - y)) %*% X
t( t((X %*% theta - y)) %*% X )
(alpha / m) * t( t((X %*% theta - y)) %*% X )
theta = vector(mode = "numeric",length = ncol(X))
(alpha / m) * t( t((X %*% theta - y)) %*% X )
theta_change = (alpha / m) * t( t((X %*% theta - y)) %*% X )
theta = theta - theta_change
theta
dat = dat2
input = c(1650, 3)
## Regress = function(dat, input) {
X = as.matrix(dat[,1:(ncol(dat) - 1)])
X = scale(X)
X = cbind(x_0 = 1, X)
y = dat$y
m = nrow(X)
iterations = 1500
alpha = 0.01
theta = vector(mode = "numeric",length = ncol(X))
J = function(X, y, theta) {
error_sqr = t((X %*% theta - y)) %*% (X %*% theta - y)
J = (1 / (2 * m)) * error_sqr
}
J_hist = vector()
for( i in 1:iterations){
theta_change = (alpha / m) * t( t((X %*% theta - y)) %*% X )
theta = theta - theta_change
J_hist = append(J_hist, J(X, y, theta))
}
plot(J_hist, type = "l")
h_theta = function(input) {
v = c(1, input)
calc = v %*% theta
calc
}
print(c("Thetas:", theta))
print(c("Result:", h_theta(input)))
##}
Regress(dat1, 3.5)
Regress(dat2, c(1650, 3))
t((X %*% theta - y))
t((X %*% theta - y)) * X
t(X %*% theta - y) * X
X
t(X %*% theta - y)
t((X %*% theta) - y)
t((X %*% theta) - y) %*% X
t(t((X %*% theta) - y) %*% X)
theta = vector(mode = "numeric",length = ncol(X))
theta = theta - alpha * (1 / m) * t(t((X %*% theta) - y) %*% X)
theta
dat = dat2
input = c(1650, 3)
## Regress = function(dat, input) {
X = as.matrix(dat[,1:(ncol(dat) - 1)])
X = scale(X)
X = cbind(x_0 = 1, X)
y = dat$y
m = nrow(X)
iterations = 1500
alpha = 0.01
theta = vector(mode = "numeric",length = ncol(X))
J = function(X, y, theta) {
error_sqr = t(X %*% theta - y) %*% (X %*% theta - y)
J = (1 / (2 * m)) * error_sqr
}
J_hist = vector()
for( i in 1:iterations){
theta = theta - alpha * (1 / m) * t(t((X %*% theta) - y) %*% X)
J_hist = append(J_hist, J(X, y, theta))
}
plot(J_hist, type = "l")
h_theta = function(input) {
v = c(1, input)
calc = v %*% theta
calc
}
print(c("Thetas:", theta))
print(c("Result:", h_theta(input)))
dat = dat2
input = c(1650, 3)
## Regress = function(dat, input) {
X = as.matrix(dat[,1:(ncol(dat) - 1)])
X = cbind(x_0 = 1, X)
y = dat$y
m = nrow(X)
iterations = 1500
alpha = 0.01
theta = vector(mode = "numeric",length = ncol(X))
J = function(X, y, theta) {
error_sqr = t(X %*% theta - y) %*% (X %*% theta - y)
J = (1 / (2 * m)) * error_sqr
}
J_hist = vector()
for( i in 1:iterations){
theta = theta - alpha * (1 / m) * t(t((X %*% theta) - y) %*% X)
J_hist = append(J_hist, J(X, y, theta))
}
plot(J_hist, type = "l")
h_theta = function(input) {
v = c(1, input)
calc = v %*% theta
calc
}
print(c("Thetas:", theta))
print(c("Result:", h_theta(input)))
error_sqr = t(X %*% theta - y) %*% (X %*% theta - y)
J = (1 / (2 * m)) * error_sqr
error_sqr = t(X %*% theta - y) %*% (X %*% theta - y)
(1 / (2 * m)) * error_sqr
dat = dat2
input = c(1650, 3)
## Regress = function(dat, input) {
X = as.matrix(dat[,1:(ncol(dat) - 1)])
X = cbind(x_0 = 1, X)
y = dat$y
m = nrow(X)
iterations = 1500
alpha = 0.01
theta = vector(mode = "numeric",length = ncol(X))
error_sqr = t(X %*% theta - y) %*% (X %*% theta - y)
(1 / (2 * m)) * error_sqr
dat = dat2
input = c(1650, 3)
## Regress = function(dat, input) {
X = as.matrix(dat[,1:(ncol(dat) - 1)])
X = cbind(x_0 = 1, X)
y = dat$y
m = nrow(X)
iterations = 1500
alpha = 0.01
theta = vector(mode = "numeric",length = ncol(X))
J = function(X, y, theta) {
error_sqr = t(X %*% theta - y) %*% (X %*% theta - y)
(1 / (2 * m)) * error_sqr
}
J_hist = vector()
for( i in 1:iterations){
theta = theta - alpha * (1 / m) * t(t((X %*% theta) - y) %*% X)
J_hist = append(J_hist, J(X, y, theta))
}
plot(J_hist, type = "l")
h_theta = function(input) {
v = c(1, input)
calc = v %*% theta
calc
}
print(c("Thetas:", theta))
print(c("Result:", h_theta(input)))
dat = dat2
input = c(1650, 3)
## Regress = function(dat, input) {
X = as.matrix(dat[,1:(ncol(dat) - 1)])
X = cbind(x_0 = 1, X)
y = dat$y
m = nrow(X)
iterations = 1500
alpha = 0.01
theta = vector(mode = "numeric",length = ncol(X))
error_sqr = t(X %*% theta - y) %*% (X %*% theta - y)
(1 / (2 * m)) * error_sqr
for( i in 1:iterations){
theta = theta - alpha * (1 / m) * t(t((X %*% theta) - y) %*% X)
J_hist = append(J_hist, J(X, y, theta))
}
J_hist
mu = colMeans(X)
sigma = apply(X, 2, sd)
sigma
dat = dat2
input = c(1650, 3)
## Regress = function(dat, input) {
X = as.matrix(dat[,1:(ncol(dat) - 1)])
mu = colMeans(X)
sigma = apply(X, 2, sd)
sigma
X
mu
dat = dat2
input = c(1650, 3)
## Regress = function(dat, input) {
X = as.matrix(dat[,1:(ncol(dat) - 1)])
mu = colMeans(X)
sigma = apply(X, 2, sd)
X = apply(X, 2, function(x) { (x - mu) / sigma})
X
X = apply(X, 2, function(x) { (x - mu) / sigma})
X = cbind(x_0 = 1, X)
X
dat = dat2
input = c(1650, 3)
## Regress = function(dat, input) {
X = as.matrix(dat[,1:(ncol(dat) - 1)])
mu = colMeans(X)
sigma = apply(X, 2, sd)
X = apply(X, 2, function(x) { (x - mu) %/% sigma})
X
X = as.matrix(dat[,1:(ncol(dat) - 1)])
mu = colMeans(X)
sigma = apply(X, 2, sd)
X = apply(X, 2, function(x) { (x - mu) / sigma})
X
as.integer(X[, x_1])
as.integer(X[,1])
dat = dat2
input = c(1650, 3)
## Regress = function(dat, input) {
X = as.matrix(dat[,1:(ncol(dat) - 1)])
mu = colMeans(X)
sigma = apply(X, 2, sd)
X = apply(X, 2, function(x) { (x - t(mu)) / t(sigma)})
dat = dat2
input = c(1650, 3)
## Regress = function(dat, input) {
X = as.matrix(dat[,1:(ncol(dat) - 1)])
mu = colMeans(X)
sigma = apply(X, 2, sd)
X = apply(X, 2, function(x) { (t(x) - m) / sigma})
X
t(X)
dat = dat2
input = c(1650, 3)
## Regress = function(dat, input) {
X = as.matrix(dat[,1:(ncol(dat) - 1)])
mu = colMeans(X)
sigma = apply(X, 2, sd)
t(X) - mu
dat = dat2
input = c(1650, 3)
## Regress = function(dat, input) {
X = as.matrix(dat[,1:(ncol(dat) - 1)])
mu = colMeans(X)
sigma = apply(X, 2, sd)
X = apply(X, 2, function(x) { (t(x) - mu) / sigma})
X
dat = dat2
input = c(1650, 3)
## Regress = function(dat, input) {
X = as.matrix(dat[,1:(ncol(dat) - 1)])
mu = colMeans(X)
sigma = apply(X, 2, sd)
mu
sigma
t(x) - mu
t(X) - mu
test = t(x) - mu
test = t(X) - mu
test / sigma
X = apply(X, 2, function(x) { (t(X) - mu) / sigma})
X
dat = dat2
input = c(1650, 3)
## Regress = function(dat, input) {
X = as.matrix(dat[,1:(ncol(dat) - 1)])
mu = colMeans(X)
sigma = apply(X, 2, sd)
X
dat = dat2
input = c(1650, 3)
## Regress = function(dat, input) {
X = as.matrix(dat[,1:(ncol(dat) - 1)])
mu = colMeans(X)
sigma = apply(X, 2, sd)
X = apply(X, 2, function(x) { (x - mu) / sigma})
X
dat = dat2
input = c(1650, 3)
## Regress = function(dat, input) {
X = as.matrix(dat[,1:(ncol(dat) - 1)])
mu = colMeans(X)
sigma = apply(X, 2, sd)
X
X[,1]
X = apply(X, MARGIN = 2, function(x) {(x - t(mu)) / t(sigma())})
dat = dat2
input = c(1650, 3)
## Regress = function(dat, input) {
X = as.matrix(dat[,1:(ncol(dat) - 1)])
mu = colMeans(X)
sigma = apply(X, 2, sd)
X = apply(X, MARGIN = 2, function(x) {(t(x) - mu) / sigma})
X
dat = dat2
input = c(1650, 3)
## Regress = function(dat, input) {
X = as.matrix(dat[,1:(ncol(dat) - 1)])
mu = as.vector(colMeans(X))
sigma = as.vector(apply(X, 2, sd))
X = apply(X, MARGIN = 2, function(x) {(t(x) - mu) / sigma})
X
dat = dat2
input = c(1650, 3)
## Regress = function(dat, input) {
X = as.matrix(dat[,1:(ncol(dat) - 1)])
mu = as.vector(colMeans(X))
sigma = as.vector(apply(X, 2, sd))
t(X) - mu
(t(X) - mu) %/% sigma
(t(X) - mu) / sigma
dat = dat2
input = c(1650, 3)
## Regress = function(dat, input) {
X = as.matrix(dat[,1:(ncol(dat) - 1)])
mu = as.vector(colMeans(X))
sigma = as.vector(apply(X, 2, sd))
X = apply(X, MARGIN = 2, function(x) {t((t(x) - mu)) / sigma})
X
dat = dat2
input = c(1650, 3)
## Regress = function(dat, input) {
X = as.matrix(dat[,1:(ncol(dat) - 1)])
mu = as.vector(colMeans(X))
sigma = as.vector(apply(X, 2, sd))
X = apply(X, MARGIN = 2, function(x) {(t(x) - mu) / t(sigma)})
dat = dat2
input = c(1650, 3)
## Regress = function(dat, input) {
X = as.matrix(dat[,1:(ncol(dat) - 1)])
mu = as.vector(colMeans(X))
sigma = as.vector(apply(X, 2, sd))
X = apply(X, MARGIN = 2, function(x) {(t(x) - mu) %/% t(sigma)})
dat = dat2
input = c(1650, 3)
## Regress = function(dat, input) {
X = as.matrix(dat[,1:(ncol(dat) - 1)])
mu = as.vector(colMeans(X))
sigma = as.vector(apply(X, 2, sd))
X = apply(X, MARGIN = 2, function(x) {(t(x) - mu) %/% sigma})
X
dat = dat2
input = c(1650, 3)
## Regress = function(dat, input) {
X = as.matrix(dat[,1:(ncol(dat) - 1)])
mu = as.vector(colMeans(X))
sigma = as.vector(apply(X, 2, sd))
X = apply(X, MARGIN = 2, function(x) {t(x) - mu})
X
dat = dat2
input = c(1650, 3)
## Regress = function(dat, input) {
X = as.matrix(dat[,1:(ncol(dat) - 1)])
mu = as.vector(colMeans(X))
sigma = as.vector(apply(X, 2, sd))
X = apply(X, MARGIN = 2, function(x) {t(x) - mu})
X = apply(X, MARGIN = 2, function(x) {t(x) / sigma})
X
as.integer(X)
dat = dat2
input = c(1650, 3)
## Regress = function(dat, input) {
X = as.matrix(dat[,1:(ncol(dat) - 1)])
mu = as.vector(colMeans(X))
sigma = as.vector(apply(X, 2, sd))
X = apply(X, MARGIN = 2, function(x) {t(x) - mu})
X = apply(X, MARGIN = 2, function(x) {x %/% sigma})
X
## -------------------------------------- Linear Regression ---------------------------------------
dat = dat2
input = c(1650, 3)
## Regress = function(dat, input) {
X = as.matrix(dat[,1:(ncol(dat) - 1)])
mu = as.vector(colMeans(X))
sigma = as.vector(apply(X, 2, sd))
X = apply(X, MARGIN = 2, function(x) {t(x) - mu})
X = apply(X, MARGIN = 2, function(x) {x / sigma})
X
dat = dat2
input = c(1650, 3)
## Regress = function(dat, input) {
X = as.matrix(dat[,1:(ncol(dat) - 1)])
mu = as.vector(colMeans(X))
sigma = as.vector(apply(X, 2, sd))
X = apply(X, MARGIN = 2, function(x) {t(x) - mu})
t(X[,1])
mu
dat = dat2
input = c(1650, 3)
## Regress = function(dat, input) {
X = as.matrix(dat[,1:(ncol(dat) - 1)])
mu = as.vector(colMeans(X))
sigma = as.vector(apply(X, 2, sd))
t(X[, 1])
mu
t(X[, 1]) - mu
X[, 1] - mu
X[, 1] - t(mu)
t(X[, 1]) - t(mu)
X - t(mu)
t(X) - mu
sigma
t(X) / sigma
t(X)
t(X) - mu
(t(X) - mu) / sigma
dat = dat2
input = c(1650, 3)
## Regress = function(dat, input) {
X = as.matrix(dat[,1:(ncol(dat) - 1)])
mu = as.vector(colMeans(X))
sigma = as.vector(apply(X, 2, sd))
X = apply(X, MARGIN = 2, function(x) {(t(x) - mu) / sigma})
X
sigma
dat = dat2
input = c(1650, 3)
## Regress = function(dat, input) {
X = as.matrix(dat[,1:(ncol(dat) - 1)])
mu = as.vector(colMeans(X))
sigma = as.vector(apply(X, 2, sd))
X = (t(X) - mu) / sigma
X
dat = dat2
input = c(1650, 3)
## Regress = function(dat, input) {
X = as.matrix(dat[,1:(ncol(dat) - 1)])
mu = as.vector(colMeans(X))
sigma = as.vector(apply(X, 2, sd))
X = t((t(X) - mu) / sigma)
X
dat = dat2
input = c(1650, 3)
## Regress = function(dat, input) {
X = as.matrix(dat[,1:(ncol(dat) - 1)])
mu = as.vector(colMeans(X))
sigma = as.vector(apply(X, 2, sd))
X = t((t(X) - mu) / sigma)
X = cbind(x_0 = 1, X)
y = dat$y
m = nrow(X)
iterations = 1500
alpha = 0.01
theta = vector(mode = "numeric",length = ncol(X))
J = function(X, y, theta) {
error_sqr = t(X %*% theta - y) %*% (X %*% theta - y)
(1 / (2 * m)) * error_sqr
}
J_hist = vector()
for( i in 1:iterations){
theta = theta - alpha * (1 / m) * t(t((X %*% theta) - y) %*% X)
J_hist = append(J_hist, J(X, y, theta))
}
plot(J_hist, type = "l")
h_theta = function(input) {
v = c(1, (t(input) - mu) / sigma)
calc = v %*% theta
calc
}
print(c("Thetas:", theta))
print(c("Result:", h_theta(input)))
if( Sys.info()['sysname'] == "Windows"){
setwd("C:/Users/thealy/G_WD/Machine_Learning/R Scripts")
} else {
setwd("~/G_WD/Machine_Learning/R Scripts")
}
## ----------------------------- Single Variable Inputs -------------------------------------------
dat1 = read.csv('ex1data1.txt')
colnames(dat1) = c('x_1', 'y')
## -------------------------------- Multivariate Inputs -------------------------------------------
dat2 = read.csv('ex1data2.txt')
colnames(dat2) = c("x_1", "x_2", "y")
## -------------------------------------- Linear Regression ---------------------------------------
Regress = function(dat, input) {
X = as.matrix(dat[,1:(ncol(dat) - 1)])
mu = as.vector(colMeans(X))
sigma = as.vector(apply(X, 2, sd))
X = t((t(X) - mu) / sigma)
X = cbind(x_0 = 1, X)
y = dat$y
m = nrow(X)
iterations = 1500
alpha = 0.01
theta = vector(mode = "numeric",length = ncol(X))
J = function(X, y, theta) {
error_sqr = t(X %*% theta - y) %*% (X %*% theta - y)
(1 / (2 * m)) * error_sqr
}
J_hist = vector()
for( i in 1:iterations){
theta = theta - alpha * (1 / m) * t(t((X %*% theta) - y) %*% X)
J_hist = append(J_hist, J(X, y, theta))
}
plot(J_hist, type = "l")
h_theta = function(input) {
v = c(1, (t(input) - mu) / sigma)
calc = v %*% theta
calc
}
print(c("Thetas:", theta))
print(c("Result:", h_theta(input)))
}
Regress(dat1, 3.5)
Regress(dat2, c(1650, 3))
egress(dat1, 3.5)
Regress(dat1, 3.5)
Regress(dat1, 3.5)
Regress(dat2, c(1650, 3))
